<?xml version="1.0" ?>
<VisualStates>
  <config>
    <buildDependencies>
      <dependency>rospy</dependency>
      <dependency>prius_msgs</dependency>
      <dependency>sensor_msgs</dependency>
    </buildDependencies>
    <runDependencies>
      <dependency>rospy</dependency>
      <dependency>prius_msgs</dependency>
      <dependency>sensor_msgs</dependency>
    </runDependencies>
    <topics>
      <topic id="0">
        <methodname>prius</methodname>
        <name>/prius_overtake/prius</name>
        <type>prius_msgs/Control</type>
        <opType>Publish</opType>
      </topic>
      <topic id="1">
        <variablename>joint_states</variablename>
        <name>/prius_overtake/joint_states</name>
        <type>sensor_msgs/JointState</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="2">
        <variablename>front_left_laser</variablename>
        <name>/prius_overtake/front_left_laser/scan</name>
        <type>sensor_msgs/LaserScan</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="3">
        <variablename>front_right_laser</variablename>
        <name>/prius_overtake/front_right_laser/scan</name>
        <type>sensor_msgs/LaserScan</type>
        <opType>Subscribe</opType>
      </topic>
      <topic id="4">
        <variablename>odom</variablename>
        <name>/prius_overtake/base_pose_ground_truth</name>
        <type>nav_msgs/Odometry</type>
        <opType>Subscribe</opType>
      </topic>
    </topics>
  </config>
  <global_namespace>
    <functions>def calculate_throttle(self, desired_velocity):
	&quot;&quot;&quot;
	PID Throttle Controller
	&quot;&quot;&quot;
	feedback_velocity = np.average(np.array(self.joint_states.velocity[:4])) # 4 Wheels
	error = desired_velocity - feedback_velocity
	self.current_time = time.time()
	delta_time = self.current_time - self.last_time
	delta_error = error - self.last_error
	self.p = self.kp * error
	self.i += error * delta_time
	self.d = delta_error / delta_time
	self.last_time = self.current_time
	self.last_error = error
	output = self.p + self.ki * self.i + self.kd * self.d
	throttle = 0
	brake = 0
	if output &gt; 1:
		throttle = 1
		brake = 0
	elif output &gt; 0:
		throttle = output
		brake = 0
	elif output &gt; -1:
		throttle = 0
		brake = abs(output)
	else:
		throttle = 0
		brake = 1
	return throttle, brake
	
def getYaw(self):
	odom = self.odom
	orientation_q = odom.pose.pose.orientation
	orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
	(roll, pitch, yaw) = tf.transformations.euler_from_quaternion (orientation_list)
	return yaw

def compareCurrYaw(self, origYaw):
	yaw = self.getYaw()
	r = 0
	if(self.prevYaw == 10):
		r=10
	elif(self.prevYaw &lt; -3 and yaw &gt; 3):
		if(origYaw &lt; self.prevYaw or origYaw &gt; yaw):
			r = -1
	elif(self.prevYaw &gt; 3 and yaw &lt; -3):
		if(origYaw &gt; self.prevYaw or origYaw &lt; yaw):
			r = 1
	elif(origYaw &gt;= yaw and origYaw &lt; self.prevYaw):
		r = -1 
	elif(origYaw &lt;= yaw and origYaw &gt; self.prevYaw):
		r = 1
	self.prevYaw = yaw
	return r</functions>
    <variables>self.current_time = 0
self.last_time = 0
self.last_error = 0
self.kp = 0.04
self.ki = 0
self.kd = 0.025
self.p = 0
self.i = 0
self.d = 0
self.origPose = 0.0
self.prevYaw = 10</variables>
    <parameters/>
  </global_namespace>
  <libraries>
    <library>numpy as np</library>
    <library>tf</library>
  </libraries>
  <state id="0" initial="True">
    <posx>0.0</posx>
    <posy>0.0</posy>
    <name>root</name>
    <code></code>
    <timestep>1</timestep>
    <namespace>
      <functions>def getRangesForAngle(self, min_angle, max_angle, laser):
	&quot;&quot;&quot;
	Applies Angle Mask to Laser
	&quot;&quot;&quot;
	laser_ranges = enumerate(laser.ranges)
	thresh = laser.angle_increment * 180 / 3.14
	ranges = []
	for k, g in enumerate(laser.ranges):
		if k*thresh &gt; min_angle and k*thresh &lt; max_angle:
			ranges.append(g)
	return ranges

def car_in_front(self):
	&quot;&quot;&quot;
	Obstacle Detection using Laser Data
	&quot;&quot;&quot;
	left_laser = self.globalNamespace.front_left_laser
	right_laser = self.globalNamespace.front_right_laser
	rf_ranges = np.array(self.getRangesForAngle(120, 180, right_laser))
	lf_ranges = np.array(self.getRangesForAngle(0, 60, left_laser))
	if (rf_ranges &lt; 6).any() or (lf_ranges &lt; 6).any():
		self.detect_car = True
		return
	self.detect_car = False

def car_in_right(self):
	&quot;&quot;&quot;
	Obstacle Detection using Laser Data
	&quot;&quot;&quot;
	right_laser = self.globalNamespace.front_right_laser
	rf_ranges = np.array(self.getRangesForAngle(60, 180, right_laser))
	if(rf_ranges &lt; 8).any():
		self.detect_car = True
		return
	self.detect_car = False
	

</functions>
      <variables>self.detect_car = False
self.pose = 0
self.wentOver = False</variables>
      <parameters/>
    </namespace>
    <state id="1" initial="True">
      <posx>877.0</posx>
      <posy>895.0</posy>
      <name>stay_on_road</name>
      <code>throttle, brake = self.globalNamespace.calculate_throttle(8)
command = Control()
command.throttle = throttle
command.brake = brake
command.steer = 0
self.globalNamespace.prius(command)</code>
      <timestep>100</timestep>
      <namespace>
        <functions></functions>
        <variables></variables>
        <parameters/>
      </namespace>
      <transition id="1">
        <type>1</type>
        <condition>self.namespace.car_in_front()
self.globalNamespace.origPose = self.globalNamespace.odom.pose.pose.position.y
self.namespace.origOrient = self.globalNamespace.getYaw()
self.globalNamespace.prevYaw = 10
return self.namespace.detect_car
</condition>
        <posx>984.0</posx>
        <posy>894.0</posy>
        <name>detect_car</name>
        <originid>1</originid>
        <destinationid>2</destinationid>
        <code></code>
      </transition>
    </state>
    <state id="2" initial="False">
      <posx>1090.0</posx>
      <posy>894.0</posy>
      <name>change_lane</name>
      <code></code>
      <timestep>100</timestep>
      <namespace>
        <functions></functions>
        <variables></variables>
        <parameters>
          <param name="peek_width" type="Float">
            <value>1.7</value>
            <description>Width that is to be covered while steering left</description>
          </param>
        </parameters>
      </namespace>
      <transition id="2">
        <type>1</type>
        <condition>comp = self.globalNamespace.compareCurrYaw(self.namespace.origOrient)
if(comp == -1):
	return True
else:
	return False</condition>
        <posx>1092.5</posx>
        <posy>970.0</posy>
        <name>lane_left</name>
        <originid>2</originid>
        <destinationid>3</destinationid>
        <code></code>
      </transition>
      <state id="5" initial="True">
        <posx>983.0</posx>
        <posy>913.0</posy>
        <name>steer_left</name>
        <code>throttle, brake = self.globalNamespace.calculate_throttle(8)
command = Control()
command.throttle = throttle
command.brake = brake
command.steer = 0.6
self.globalNamespace.prius(command)</code>
        <timestep>100</timestep>
        <namespace>
          <functions></functions>
          <variables></variables>
          <parameters/>
        </namespace>
        <transition id="5">
          <type>1</type>
          <condition>currPose = self.globalNamespace.odom.pose.pose.position.y
if(abs(currPose - self.globalNamespace.origPose)&gt;self.namespace.peek_width):
	return True
else:
	return False</condition>
          <posx>984.0</posx>
          <posy>1001.0</posy>
          <name>is_align</name>
          <originid>5</originid>
          <destinationid>6</destinationid>
          <code></code>
        </transition>
      </state>
      <state id="6" initial="False">
        <posx>982.0</posx>
        <posy>1076.0</posy>
        <name>align</name>
        <code>throttle, brake = self.globalNamespace.calculate_throttle(8)
command = Control()
command.throttle = throttle
command.brake = brake
command.steer = -0.6
self.globalNamespace.prius(command)</code>
        <timestep>100</timestep>
        <namespace>
          <functions></functions>
          <variables></variables>
          <parameters/>
        </namespace>
      </state>
    </state>
    <state id="3" initial="False">
      <posx>1093.0</posx>
      <posy>1047.0</posy>
      <name>accelerate</name>
      <code>throttle, brake = self.globalNamespace.calculate_throttle(8)
command = Control()
command.throttle = throttle
command.brake = brake
command.steer = 0
self.globalNamespace.prius(command)</code>
      <timestep>100</timestep>
      <namespace>
        <functions></functions>
        <variables></variables>
        <parameters/>
      </namespace>
      <transition id="3">
        <type>1</type>
        <condition>self.namespace.car_in_right()
self.globalNamespace.prevYaw = 10
self.globalNamespace.origPose = self.globalNamespace.odom.pose.pose.position.y
return not self.namespace.detect_car
</condition>
        <posx>993.0</posx>
        <posy>1047.0</posy>
        <name>car_crossed</name>
        <originid>3</originid>
        <destinationid>4</destinationid>
        <code></code>
      </transition>
    </state>
    <state id="4" initial="False">
      <posx>884.0</posx>
      <posy>1046.0</posy>
      <name>change_lane</name>
      <code></code>
      <timestep>100</timestep>
      <namespace>
        <functions></functions>
        <variables></variables>
        <parameters>
          <param name="peek_width" type="Float">
            <value>1.5</value>
            <description>Width that is to be covered while steering left</description>
          </param>
        </parameters>
      </namespace>
      <transition id="4">
        <type>1</type>
        <condition>comp = self.globalNamespace.compareCurrYaw(self.namespace.origOrient)
if(comp == 1):
	return True
else:
	return False</condition>
        <posx>880.5</posx>
        <posy>971.5</posy>
        <name>success</name>
        <originid>4</originid>
        <destinationid>1</destinationid>
        <code></code>
      </transition>
      <state id="7" initial="True">
        <posx>972.0</posx>
        <posy>878.0</posy>
        <name>steer_right</name>
        <code>throttle, brake = self.globalNamespace.calculate_throttle(8)
command = Control()
command.throttle = throttle
command.brake = brake
command.steer = -0.6
self.globalNamespace.prius(command)</code>
        <timestep>100</timestep>
        <namespace>
          <functions></functions>
          <variables></variables>
          <parameters/>
        </namespace>
        <transition id="6">
          <type>1</type>
          <condition>currPose = self.globalNamespace.odom.pose.pose.position.y

if(abs(currPose - self.globalNamespace.origPose)&gt;=self.namespace.peek_width):
	return True
else:
	return False</condition>
          <posx>971.0</posx>
          <posy>968.0</posy>
          <name>is_align</name>
          <originid>7</originid>
          <destinationid>8</destinationid>
          <code></code>
        </transition>
      </state>
      <state id="8" initial="False">
        <posx>970.0</posx>
        <posy>1058.0</posy>
        <name>align</name>
        <code>throttle, brake = self.globalNamespace.calculate_throttle(8)
command = Control()
command.throttle = throttle
command.brake = brake
command.steer = 0.6
self.globalNamespace.prius(command)</code>
        <timestep>100</timestep>
        <namespace>
          <functions></functions>
          <variables></variables>
          <parameters/>
        </namespace>
      </state>
    </state>
  </state>
</VisualStates>
