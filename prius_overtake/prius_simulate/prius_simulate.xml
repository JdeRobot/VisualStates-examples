<?xml version="1.0" ?>
<VisualStates>
  <config>
    <buildDependencies>
      <dependency>rospy</dependency>
      <dependency>prius_msgs</dependency>
      <dependency>sensor_msgs</dependency>
    </buildDependencies>
    <runDependencies>
      <dependency>rospy</dependency>
      <dependency>prius_msgs</dependency>
      <dependency>sensor_msgs</dependency>
    </runDependencies>
    <topics>
      <topic id="0">
        <methodname>prius</methodname>
        <name>/prius_simulate/prius</name>
        <type>prius_msgs/Control</type>
        <opType>Publish</opType>
      </topic>
      <topic id="1">
        <variablename>joint_states</variablename>
        <name>/prius_simulate/joint_states</name>
        <type>sensor_msgs/JointState</type>
        <opType>Subscribe</opType>
      </topic>
    </topics>
  </config>
  <global_namespace>
    <functions></functions>
    <variables></variables>
  </global_namespace>
  <libraries>
    <library>numpy as np</library>
  </libraries>
  <state id="0" initial="True">
    <posx>0.0</posx>
    <posy>0.0</posy>
    <name>root</name>
    <code></code>
    <timestep>100</timestep>
    <namespace>
      <functions>def calculate_throttle(self, desired_velocity):
	&quot;&quot;&quot;
	PID Throttle Controller
	&quot;&quot;&quot;
	feedback_velocity = np.average(np.array(self.globalNamespace.joint_states.velocity[:4])) # 4 Wheels
	error = desired_velocity - feedback_velocity
	print(&quot;Error:&quot;, error)
	self.current_time = time.time()
	delta_time = self.current_time - self.last_time
	delta_error = error - self.last_error
	self.p = self.kp * error
	self.i += error * delta_time
	self.d = delta_error / delta_time
	self.last_time = self.current_time
	self.last_error = error
	output = self.p + self.ki * self.i + self.kd * self.d
	print(&quot;output&quot;, output)
	return output</functions>
      <variables>self.current_time = 0
self.last_time = 0
self.last_error = 0
self.kp = 0.05
self.ki = 0
self.kd = 0.03
self.p = 0
self.i = 0
self.d = 0</variables>
    </namespace>
    <state id="1" initial="True">
      <posx>967.0</posx>
      <posy>920.0</posy>
      <name>stay_on_road</name>
      <code>output = self.namespace.calculate_throttle(3)
throttle = 0
brake = 0
if output &gt; 1:
	throttle = 1
	brake = 0
elif output &gt; 0:
	throttle = output
	brake = 0
elif output &gt; -1:
	throttle = 0
	brake = abs(output)
else:
	throttle = 0
	brake = 1
command = Control()
command.throttle = throttle
command.brake = brake
command.steer = 0
self.globalNamespace.prius(command)</code>
      <timestep>100</timestep>
      <namespace>
        <functions></functions>
        <variables></variables>
      </namespace>
    </state>
  </state>
</VisualStates>
